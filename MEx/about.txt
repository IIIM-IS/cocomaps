The meaning extractor takes in arguments(defined later) and spits out 
reference values, probabilites of what actions should be started.

One of the inputs is the string of text (audio-to-text output) and from 
that input a comparison to a specific template (handed from the Task object) 
which MEx tries to match, if it matches a specific instance in the template
e.g. if the task is AskForInput, it hands a template (currently not defined)
with a list of the tasks. Then compares the input string with the tasks 
dictionary, creating probability distribution for each type.
Then returns the highest probability. 

	Here we can add a rule, if the highest found probability
		is 50>x>92 ask to be sure, if x>92 (values are
		arbitrary at this point)

Initially the values are given on a word basis i.e. given a specific word
the template output (makeCall | makeAppointment | getInfo ) going iteratively
through the input string e.g. "i would like you to schedule a meeting"
		i - not in dict tasks
		would - not in dict tasks
		like - not in dict tasks
		you - not in dict tasks
		to - not in dict tasks
		schedule - in dict task - makeAppointment+=75%
		meeting - in dict task - makeAppointment+=75%
at this point makeAppointment > 100% so we can return the value quite
confidently and don't need to ask for corraboration(according to previously
suggested rule)


About implimenting Markov Chains
Once we have this applicable a Markov Chain can be implimented, and therefore
the values computed and reduced. I.e. given the word meet we have 50%
certainty that we are talking about makeAppointment, hower if we have 
"meet with" we can be 95% certain that the task is makeAppointment. This 
however requrires a database that is computeded with probabilities and
is outside the current scope of project. 
Here we will initialize the naive mehtod. 
